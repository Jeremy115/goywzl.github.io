---
layout: article
title:  "zabbix explain"
date:   2016-01-02 09:20:00 +0800
categories: linux
---

# 简单概述： #

Alexei Vladishev创建了Zabbix项目，当前处于活跃开发状态，Zabbix SIA提供支持.

Zabbix是一个企业级的、开源的、分布式的监控套件

Zabbix可以监控网络和服务的监控状况. Zabbix利用灵活的告警机制，允许用户对事件发送基于Email的告警. 这样可以保证快速的对问题作出相应. Zabbix可以利用存储数据提供杰出的报告及图形化方式. 这一特性将帮助用户完成容量规划.

Zabbix支持polling和trapping两种方式. 所有的Zabbix报告都可以通过配置参数在WEB前端进行访问. Web前端将帮助你在任何区域都能够迅速获得你的网络及服务状况. Zabbix可以通过尽可能的配置来扮演监控你的IT基础框架的角色，而不管你是来自于小型组织还是大规模的公司.

Zabbix是零成本的. 因为Zabbix编写和发布基于GPL V2协议. 意味着源代码是免费发布的.

Zabbix公司也提供商业化的技术支持

# Zabbix特性介绍 #

概述：Zabbix是一个高度集成的网络监控套件，通过一个软件包即可提供如下特性

数据收集：
    可用性及性能检测
    支持SNMP(trapping及polling)、IPMI、JMX监控
    自定义检测
    自定义间隔收集收据
    server/proxy/agents吸能

灵活的阀值定义：允许灵活地自定义问题阀值，Zabbix中称为触发器(trigger), 存储在后端数据库中

高级告警配置：
    可以自定义告警升级(escalation)、接收者及告警方式
    告警信息可以配置并允许使用宏(macro)变量
    通过远程命令实行自动化动作(action)

实时绘图：通过内置的绘图方法实现监控数据实时绘图

扩展的图形化显示：
    允许自定义创建多监控项视图
    网络拓扑(network maps)
    自定义的面板(screen)和slide shows，并允许在dashboard页面显示
    报告
    高等级(商业)监控资源

历史数据存储：
    数据存储在数据库中
    历史数据可配置
    内置数据清理机制

配置简单：
    主机通过添加监控设备方式添加
    一次配置，终生监控(译者注：除非调整或删除)
    监控设备允许使用模板

模板使用：
    模板中可以添加组监控
    模板允许继承

网络自动发现：
    自动发现网络设备
    agent自动注册
    自动发现文件系统、网卡设备、SNMP OID等

快速的web接口：
    web前端采用php编写
    访问无障碍
    你想怎么做就能做么做
    审计日志

Zabbix API：提供程序级别的访问接口，第三方程序可以很快接入

权限系统：
    安全的权限认证
    用户可以限制允许维护的列表

全特性、agent易扩展：
    在监控目标上部署
    支持Linux及Windows

二进制守护进程：
    C开发，高性能，低内存消耗
    易移植

具备应对复杂环境情况：通过Zabbix proxy可以非常容易的创建远程监控

----------

# Zabbix名词解释 #

简单介绍一下，在Zabbix之中，你会遇到的一些名词

主机(host)：一个你想监控的网络设备(需要知道IP/DNS)

主机组(host group)：一个逻辑的主机组，它包含主机和模板。 主机和模板在同一个主机内的话模板不能被link到其他上。 主机组通常用于给不同的用户组创建访问权限

监控项(item)：你想从主机中收集到的数据

触发器(trigger)：一个逻辑表达式，用来表达从监控项获取的数据达到了预设的问题阀值，当接收到的监控值达到了预设的阀值，则触发器状态由’OK’变更为’Problem’，当收到的监控值低于阀值，则状态保持/变更为’OK’.

事件(event)：一个事情发生如触发器状态变更或一个自动发（discovery)/agent自动注册等

动作(action)：当一个事件发生时预设的处理过程，一个动作(action)包括操作(operations，如发送告警)和条件(当指定的操作完成)

告警升级(escalation)：在动作中一个自定的操作执行过程，一个发送告警/执行远程命令的队列

媒介(media)：发送告警的渠道

告警(notification)：通过媒介(media)渠道发送事件的消息

远程命令(remote command)：当监控主机达到某些条件(condition)后预设的自动执行的命令

模板(template)：一组包含监控项、触发器、绘图、面板(screen)、应用、低级别自动发现规则等并且能被其他主机应用的实体，模板能够提升主机部署监控任务的速度，同时也非常容易对监控任务做批量(mass)更新。模板被主机链接(link).

应用(application)：监控项逻辑组

web方案(scenario)：对一个web站点可用性进行检查的一个或多个http请求

前端(frontend)：Zabbix提供的web接口

Zabbix API：Zabbix API允许通过JSON RPC协议去创建、更新、获得Zabbix对象(如主机、监控项、绘图等等)以及完成自定义任务

Zabbix server：Zabbix软件中心进程，用于连通Zabbix proxy及agent完成监控、评估触发器、发送告警以及中心数据存储

Zabbix agent：部署在监控主机上的进程，用于监控本地资源和应用

Zabbix proxy：替代Zabbix server完成数据收集的进程，通常用于降低中心Zabbix Server的负载

节点(node)：一套完整的Zabbix server配置，通常位于分布式系统中，用于负责本区域的监控

----------

# Zabbix名词术语 #

**Zabbix server**是Zabbix软件的中心进程.

    Server执行polling和trapping来采集数据，评估是否触发触发器，发送报警给用户. 它左右Zabbix agent和proxy的用来报告可用性和一致性数据的中心组件(译者注：好像翻译的部队，还是附上原文吧 It is the central component to which Zabbix agents and proxies report data on availability and integrity of systems.)，Server也可以通过简单服务检查(simple service check)来完成远程网络服务检测.
    
    Server是所有配置、统计和操作数据的中心存储仓库，也是在所有的监控系统中扮演故障发生时通知管理员的角色.
    
    基础Zabbix server依据功能不同划分为三个部分，分别为:Zabbix server、web前端及数据库.
    
    由于Zabbix的所有的配置信息保存在数据库中，server和web前端可以直接进行操作。比如，通过web前端(或者API)创建一个新的监控项时，它将创建的数据插入数据库。一分钟左右Zabbix server会查询监控项数据表，并将查询的监控项 列表保存在自己的缓存(cache)中。这也是为什么通过Zabbix前端进行的变更将在两分钟左右生效.

**Zabbix agent**部署在被监控机器上用来监控本地资源和应用（如硬盘、内存、处理器统计等）.

    Zabbix agent聚合本地的运行信息并将数据发送给Zabbix server以进一步处理. 一旦出现异常(如硬盘空间满的情况或者服务进行宕掉), Zabbix server将会发送告警给管理员报告本次异常.
    
    Zabbix agent利用本地系统调用完成统计信息收集，因此它非常的高效.
    被动(passive)和主动(active)检查
    
    Zabbix agent提供被动和主动检查方式.
    
    在 被动检查 模式中agent应答数据请求，Zabbix server或者proxy询问agent数据,如CPU load, 然后Zabbix agent回送结果给server.
    
    主动检查 处理过程将相对复杂. agent必须首先进行一次请求Zabbix server索取监控项列表，然后发送对应的值给server.
    
    选择是被动还是主动检查，需要在 监控项类型 中选择

**Zabbix代理(proxy)**通常用于替代server完成对多个监控设备收集监控信息并将数据发送给Zabbix server. 

    所有的收集数据会先存储在代理本地缓存中然后传送给Zabbix server.
    
    代理是可选的,不过使用它可以有效的降低在分布式环境中单一的Zabbix server负载. 通过代理去收集收集，server可以有效降低CPU和磁盘I/O消耗.
    
    Zabbix代理可以出色的完成远程区域、分支机构、没有本地管理员的网络的集中监控.
    
    Zabbix代理使用独立的数据库.
    
    Warning Zabbix proxy数据库可以使用SQLite, MySQL, PostgreSQL. 如果Oracle或IBM DB2在低等级自动发现规则时存在限制和风险.
    
    可以查看: 在分布式环境中使用代理

**Zabbix sender**命令行工具常用于发送性能数据给Zabbix server.

    该工具常用于在长时间运行的用户自定义脚本中以便不断发送可用性及性能数据.

**Zabbix get**用于连接Zabbix agent并从agent上检索需要的信息.

    该工具常用于对Zabbix agent进行troubleshooting.

**zabbix_java_gateway**

    zabbix2.0之后引入的一个功能。顾名思义：Java网关，类似agentd，但是只用于Java方面。需要特别注意的是，它只能主动去获取数据，而不能被动获取数据。它的数据最终会给到server或者proxy。


----------

Zabbix数据采集

Zabbix数据采集的方法有很多种，简单的说几种

**1.通过Zabbix被监控设备代理(agent)采集数据**

在被监控设置安装并运行zabbix被监控设备代理进程（Zabbix系统自带的一个组件。在编译配置选项带–enable-agent选项。）通过该进程收集监控项目的数据，并与Zabbix服务器或监控服务器代理(Proxy)通信，主动发送或被动接受服务器或服务器代理查询的数据采集方式。这种方法只适用于采集服务器或工作站上的监控数据，不适合采集路由器、交换机、防火墙等网络设备的监控数据。

**2.简单检查**

这种数据采集方法是指Zabbix服务器（也包括服务器代理）自身通过检查被监控设备的tcp端口状态或ICMP的信息来获取监控数据的数据采集方法。不需要在被监控设备上安装任何第三方软件。但是，这种方法只适合收集像服务的端口状态等状态数据，不适合采集性能方面的数据。

**3.通过SNMP协议采集数据**

即通过SNMP的查询和陷入进行监控数据的采集。适合对网络设备，如防火墙、交换机、路由器等的监控数据的采集。目前Zabbix系统支持SNMP v1 SNMP v2c和SNMP v3版本的协议。通过SNMP协议采集数据不需要在被监控设备上安装任何第三方软件，但是需要配置和开启SNMP服务，并允许监控服务器查询。这个是我们目前使用比较多的数据采集方法。缺点是，其通信协议走的UDP协议，传输为不可靠传输，所以存在丢数据的现象。同时，MIB库一般是跟被监控设备有关，不适合监控自定义的项目。

**4.Zabbix系统内部数据采集**

Zabbix系统内部数据采集方法就是采集和监控Zabbix系统自身状态和性能数据的方法。Zabbix系统内部数据采集方法是由Zabbix服务器端通过计算获取的，所以这种数据采集方法不需要安装任何的客户端。这个数据采集方法只适用于Zabbix服务器自身的监控，不适用其它设备和主机。主要用于监控Zabbix系统自身的问题。

**5.Zabbix陷入**

Zabbix陷入是指在被监控主机上定时的执行特定的程序或命令，主动向Zabbix系统的服务器端或服务器代理端发送被监控项目的数据的数据采集方法。因此，Zabbix陷入是一种主动模式的数据采集方法，即由被监控主机定时或周期的向Zabbix系统的服务器端或服务器代理端发送所采集到的数据。这个数据采集方法一般只适用于服务器、工作站等我们可以在其上安装和部署脚本程序的设备。这个数据采集方法可以采集我们自己定义的个性化的监控项目。缺点是需要自己编写脚本和程序，所以对编程能力有一定的要求
。

**6.数据聚合**

所谓数据聚合（在Zabbix前台的数据采集型中称之为Aggregate Checks）是指并不直接从被监控主机上采集监控数据，而是指根据已定义的监控项目上采集的数据通过一定的计算方法复合出新的监控项目的数据。适合于跨多个被监控设备的数据汇总计算，以生成新监控项目。

**7.通过脚本采集数据**

这种数据采集方法其实很简单，即由Zabbix服务器端进程根据配置信息，按计划地执行指定的脚本程序或命令，然后俘获脚本程序或命令的输出内容为对应监控项目的值。这种方法也要求有一定的编程能力。同时，因为脚本是在Zabbix服务器端执行的，所以要求被监控设备要给Zabbix服务器端一定的授权，存在一定的安全风险。

**8.数据库监控**

数据库监控采集方法的原理就是，Zabbix服务器进程直接通过ODBC接口技术，查询各种不同类型的数据库里的数据，以采集需要的数据内容。由此我们可以看出，数据库监控是一种通过直接操作被监控系统数据库的方法来采集数据的。因此，这种数据采集方法可以采集应用层面的性能数据，可以监控个性化的项目。同时，因为这个方法是使用了ODBC技术，所以它可以支持的数据库种类非常多，几乎支持市场上主流的数据库。缺点是，Zabbix系统中只能支持的SQL语句，不能嵌套。

**9.通过IPMI代理采集数据**

智能平台管理接口(IPMI，Intelligent Platform Management Interface)，是管理基于Intel架构的企业系统中所使用的外围设备所采用的一种工业标准。通过这种方法采集数据的优点是：它可以采集到其它方法无法采集到的硬件状态信息，例如CPU温度、风扇转数等等。缺点是，需要被监控硬件能够支持。而这个一般在购买服务器（这种方法一般只适用于服务器）时是需要单独购买控制卡的。

**10.通过SSH协议采集数据**

通过SSH协议采集的原理很简单，zabbix服务器端或服务器代理端根据配置，使用SSH协议连接到被监控主机上，然后在被监控主机上执行用户配置的命令序列或者指定的脚本，Zabbix服务器端或服务器代理端捕获被执行的命令序列或脚本程序所返回的结果作为被监控项目所采集的数据。所以，这种方法可以采集到我们所需要的个性化的数据。缺点是需要有一定的编程能力，以及被监控设备和Zabbix服务器之间需要通过公钥私钥验证。

**11.通过TELNET协议采集数据**

与“通过SSH协议采集数据”方法是类似的，只是这种方法走的是TELNET协议，所以安全要更低。

**12.通过JMX协议采集数据**

JAVA管理扩展(JMX，Java Management Extensions)是一个可作为应用程序、设备和系统等植入管理功能的框架。简单地说，JMX框架在不对现有的应用做修改的情况下植入到现有的应用中，以对现有的应用的运行情况进行管理。这种方法一般只适用于采集JAVA应用的数据，而不太适合采集系统级的甚至硬件级的监控数据。要求被监控设备上必须安装JAVA环境，同是启动相应的服务。

**13.通过计算的方法采集监控数据**

通过计算的方法获取监控数据，顾名思义就是将现有的多个被监控项目上所采集的数据进行一定的计算，从而获取新的数据的数据采集方法。这种数据采集方法与“数据聚合”有相同之处也有不同之处，相同之处是这两个方法本质上都是对现有的监控项目所采集到的数据进行复合计算，以获得新的需要监控的数据。不同之处是，这个方法一般只针对单台被监控设备内部不同项目的数据进行计算，不跨主机计算。这种方法我们目前有少量在使用。
---
layout: article
title:  "Crontab定时计划任务"
date:   2015-12-31 09:20:00 +0800
categories: linux
---


# CRONTAB概念/介绍 #

      crontab命令用于设置周期性被执行的指令。该命令从标准输入设备读取指令，并将其存放于“crontab”文件中，以供之后读取和执行。

cron 系统调度进程。

可以使用它在每天的非高峰负荷时间段运行作业，或在一周或一月中的不同时段运行。

cron是系统主要的调度进程，可以在无需人工干预的情况下运行作业。crontab命令允许用户提交、编辑或删除相应的作业。每一个用户都可以有一个crontab文件来保存调度信息。

系统管理员可以通过`cron.deny` 和 `cron.allow` 这两个文件来禁止或允许用户拥有自己的crontab文件。

#### 1.crontab文件一般位于/etc/下，这里面存放系统运行的的调度程序。 ####

{% highlight bash %}
{% raw %}

[root@localhost cron]# more /etc/crontab
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
HOME=/
# run-parts
01 * * * * root run-parts /etc/cron.hourly
02 4 * * * root run-parts /etc/cron.daily
22 4 * * 0 root run-parts /etc/cron.weekly
42 4 1 * * root run-parts /etc/cron.monthly

{% endraw %}
{% endhighlight %}

#### 2.每个用户都会生成一个自动生成一个自己的crontab文件，一般位于/var/spool/cron目录下 ####
 
{% highlight bash %}
{% raw %}

[root@localhost cron]# cd /var/spool/cron
[root@localhost cron]# ls
oracle root

{% endraw %}
{% endhighlight %}

如果你用命令crontab -r 就会删除当前用户的crontab文件，例如你切换到oracle账号下，执行了该命令，那么/var/spool/cron/oracle文件就会删除，如果要创建该文件只需要用crontab -e命令即可。

注意，普通用户一般没有权限访问/var/spool/cron

#### 3.cron.deny 与 cron.allow文件 ####
 
	/etc/cron.deny 表示不能使用crontab 命令的用户
	/etc/cron.allow 表示能使用crontab的用户。

默认情况下，cron.allow文件不存在。如果两个文件同时存在，那么/etc/cron.allow 优先。如果两个文件都不存在，那么只有超级用户可以安排作业。

但是让人纳闷的是cron.deny文件是空的

 
# CRONTAB语法及应用 #
 
#### 1.查看当前用户的定时任务 ####

{% highlight bash %}
{% raw %}

[oracle@localhost ~]$ crontab -l
* * * * * /home/oracle/test.sh >/dev/null 2>&1
 
{% endraw %}
{% endhighlight %}

#### 2.编辑当前用户的定时任务 ####
 
可以在编辑状态修改、删除、新增一些定时任务。注释一般用#

{% highlight bash %}
{% raw %}

[oracle@localhost ~]$ crontab -e
 
{% endraw %}
{% endhighlight %}

 
#### 3.删除当前用户的定时任务 ####

{% highlight bash %}
{% raw %}

[root@localhost ~]# crontab -r
[root@localhost ~]# crontab -l
no crontab for root
 
{% endraw %}
{% endhighlight %}

#### 4.如下所示，一般crontab文件里面的定时任务格式如下所示： ####
 
{% highlight bash %}
{% raw %}

59 23 * * * /home/shell/test.sh >/dev/null 2>&1

{% endraw %}
{% endhighlight %}

crontab 文件中每个条目中各个域的意义和格式：

	第一列 分钟： 1——59
	第二列 小时： 1——23(0表示子夜)
	第三列 日 ： 1——31
	第四列 月 ： 1——12
	第五列 星期： 星期0——6(0表示星期天，1表示星期一、以此类推)
	第六列 要运行的命令
 
 
 
# Ubuntu的Crontab #
 
 
我在使用Ubuntu设置计划任务的时候

使用crontab -e  去设置一个定时任务，发现vi无效，无法正常退出

	1.使用Ctrl + x 退出
	2.或者ctrl + z 强制退出，然后再用ps -ef|grep crontab   找出相关的进程pid，使用 kill  -9 pid  去杀死相关进程

然后才知道ubuntu下crontab的默认编辑器不是vi，如果要用vi需要

{% highlight bash %}
{% raw %}

export EDITOR

{% endraw %}
{% endhighlight %}

在命令行输入

{% highlight bash %}
{% raw %}

export EDITOR=vim

{% endraw %}
{% endhighlight %}

设置后就可以在ubuntu下使用Crontab -e 就能正常使用VIm模式编辑Crontab了
 
 
 
 
 
# 查看日志 #
 
都知道，执行程序，有问题，必需看日志啊

#### linux下看日志 ####

/var/log/cron这个文件就可以，可以用tail -f /var/log/cron观察
Ubuntu下看日志

/var/log/cron.log 这个文件就可以

不过，默认没有开启，需要

修改rsyslog

{% highlight bash %}
{% raw %}

sudo vim /etc/rsyslog.d/50-default.conf
cron.*              /var/log/cron.log #将cron前面的注释符去掉 

{% endraw %}
{% endhighlight %}

重启rsyslog

{% highlight bash %}
{% raw %}

sudo  service rsyslog  restart

{% endraw %}
{% endhighlight %}

重启cron

{% highlight bash %}
{% raw %}

sudo service cron restart

{% endraw %}
{% endhighlight %}

#### 附加： ####

Crontab的权限控制文件

{% highlight bash %}
{% raw %}

/etc/cron.allow /etc/cron.deny   都不存在仅有root可以按照新的crontab

{% endraw %}
{% endhighlight %}

仅有/etc/cron.deny 存在 除了cron.deny中的用户,其他用户都可以建立crontab

仅有/etc/cron.allow 存在 仅允许cron.allow中的用户建立crontab

如果两个文件都存在 忽略 cron.deny

crontab命令不执行的原因：

crontab虽然用起来非常的方便，但其对脚本的书写要求也是非常苛刻的。很多脚本在bash中正常可以./或sh 执行，

而在crontab里执行出错。具体可以注意以下几点：

	1、如mv、ls、passwd等诸如此类的命令，最好写为全路径。如/bin/mv格式。

	2、文件里涉及用到的一些文件，也最好能在脚本开头定义下路径或写全路径。

对于一些不想写全路径或定义路径时，也要在下面的路句执行上加上一名cd 绝对路径目录。

#### 示例： ####

这样用户就可以往crontab 文件中写入无限多的行以完成无限多的命令。命令域中可以写入所有可以在命令行写入的命令和符号，其他所有时间域都支持列举，也就是域中可以写入很多的时间 值，只要满足这些时间值中的任何一个都执行命令，每两个时间值中间使用逗号分隔。

除了数字还有几个个特殊的符号就是"*"、"/"和"-"、","，*代表所有的取值范围内的数字，"/"代表每的意思,"*/5"表示每5个单位，"-"代表从某个数字到某个数字,","分开几个离散的数字。几个例子：

每天早上6点

{% highlight bash %}
{% raw %}

0 6 * * * echo "Good morning." >> /tmp/test.txt 

{% endraw %}
{% endhighlight %}

//注意单纯echo，从屏幕上看不到任何输出，因为cron把任何输出都email到root的信箱了。

每两个小时

{% highlight bash %}
{% raw %}

0 */2 * * * echo "Have a break now." >> /tmp/test.txt

{% endraw %}
{% endhighlight %}

晚上11点到早上8点之间每两个小时，早上八点

{% highlight bash %}
{% raw %}

0 23-7/2，8 * * * echo "Have a good dream：）" >> /tmp/test.txt

{% endraw %}
{% endhighlight %}

每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点

{% highlight bash %}
{% raw %}

0 11 4 * 1-3 command line

{% endraw %}
{% endhighlight %}

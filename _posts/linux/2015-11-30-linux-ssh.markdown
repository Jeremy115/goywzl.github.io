---
layout: article
title:  "linux-ssh"
date:   2015-11-30 09:20:00 +0800
categories: linux
---

ssh远程服务，用来登录远程linux主机，这里我就直接介绍命令了。

# 首先还是安装ssh #

你在命令行下输入ssh，出现如下信息

	-bash: ssh: command not found	

恭喜你，你的系统并没有ssh这个服务，你需要安装

{% highlight bash %}
{% raw %}

yum install -y openssh*

{% endraw %}
{% endhighlight %}


好了，你安装完了


----------

# 下面介绍ssh的命令 #

查看ssh客户端的版本号：

{% highlight bash %}
{% raw %}

[root@localhost ~]# ssh -V 

OpenSSH_5.3p1, OpenSSL 1.0.1e-fips 11 Feb 2013

{% endraw %}
{% endhighlight %}

当你第一次使用ssh登录远程主机时，会出现没有找到主机密钥的提示信息。输入"yes"后，系统会将远程主机的密钥加入到你的主目录下的 .ssh/hostkeys下,之后就不需要了。

ssh的常用格式： `ssh [-l login_name] [-p port] [user@]hostname`

不指定用户

{% highlight bash %}
{% raw %}

ssh 192.168.0.1

{% endraw %}
{% endhighlight %}

指定用户

{% highlight bash %}
{% raw %}

ssh root@192.168.0.1

{% endraw %}
{% endhighlight %}

非22端口

{% highlight bash %}
{% raw %}

ssh -p 8888 192.168.0.1

{% endraw %}
{% endhighlight %}

还有一个传输命令`scp`

命令的基本格式：`scp [OPTIONS] file_source file_target `

OPTIONS： 

    -v 和大多数 linux 命令中的 -v 意思一样 , 用来显示进度 . 可以用来查看连接、认证、 或是配置错误 
    -C 使能压缩选项 
    -P 选择端口 . 注意 -p 已经被 rcp 使用 

有两种方法

1.从 本地 复制 到 远程 

{% highlight bash %}
{% raw %}

scp /home/daisy/full.tar.gz root@172.19.2.75:/home/root 

{% endraw %}
{% endhighlight %}

（然后会提示你输入另外那台172.19.2.75主机的root用户的登录密码，接着就开始copy了），复制目录加参数 -r 即可 

2.从 远程 复制 到 本地 

{% highlight bash %}
{% raw %}

scp root@/172.19.2.75:/home/root/full.tar.gz /home/daisy/full.tar.gz

{% endraw %}
{% endhighlight %}


----------


# SSH无密码登录 #

就是通过公钥、私钥，实现不需要密码登录到远程主机

示例：

主机A：192.168.1.1

主机B：192.168.1.2

需要配置主机A无密码登录主机A，主机B

先确保所有主机的防火墙处于关闭状态。

在主机A上执行如下：

{% highlight bash %}
{% raw %}

$cd ~/.ssh

$ssh-keygen -t rsa  --------------------然后一直按回车键，

就会按照默认的选项将生成的密钥保存在.ssh/id_rsa文件中。

$cp id_rsa.pub authorized_keys 

这步完成后，正常情况下就可以无密码登录本机了，即ssh localhost，无需输入密码。

$scp authorized_keys test@192.168.1.2:/home/summer/.ssh   

------把刚刚产生的authorized_keys文件拷一份到主机B上. 

$chmod 600 authorized_keys

上面的两步可以合成下面的一步

$ssh-copy-id -i test@192.168.1.2

{% endraw %}
{% endhighlight %}

进入主机B的.ssh目录，改变authorized_keys文件的许可权限。

正常情况下上面几步执行完成后，从主机A所在机器向主机A、主机B所在机器发起ssh连接，只有在第一次登录时需要输入密码，以后则不需要。

这里说一下我遇到过的问题：

1.进行ssh登录时，出现：”Agent admitted failure to sign using the key“ .

执行： `$ssh-add` 强行将私钥 加进来。

2.如果无任何错误提示，可以输密码登录，但就是不能无密码登录，在被连接的主机上（如A向B发起ssh连接，则在B上）执行以下几步：

{% highlight bash %}
{% raw %}

$chmod o-w ~/
$chmod 700 ~/.ssh
$chmod 600 ~/.ssh/authorized_keys

{% endraw %}
{% endhighlight %}

3.如果执行了第2步，还是不能无密码登录，再试试下面几个

{% highlight bash %}
{% raw %}

$ps -Af | grep agent

{% endraw %}
{% endhighlight %}

检查ssh代理是否开启，如果有开启的话，kill掉该代理，然后执行下面，重新打开一个ssh代理，如果没有开启，直接执行下面：

{% highlight bash %}
{% raw %}

$ssh-agent

{% endraw %}
{% endhighlight %}

还是不行的话，执行下面，重启一下ssh服务

{% highlight bash %}
{% raw %}

$sudo service sshd restart

{% endraw %}
{% endhighlight %}

4.执行ssh-add时提示“Could not open a connection to your authenticationh agent”而失败

{% highlight bash %}
{% raw %}

ssh-agent bash

{% endraw %}
{% endhighlight %}

----------

# SSH快捷登录 #

所谓ssh快捷登录，就是你在使用ssh的时候，你需要输入IP地址，有的会输入用户名，比如我，还有的会在属于一个-p端口号，然后ssh快捷登录则不需要输入这些。

我这里一个方法，配置太简单了，方法也很简单，配过无密码登录的都知道.ssh这个目录。

首先创建文件config

{% highlight bash %}
{% raw %}

vim ~/.ssh/config

Host test1
	hostname 192.168.1.100
	user test1
	port 3336
Host test2
	hostname 192.168.1.110
	user test2
	port 22

{% endraw %}
{% endhighlight %}

保存文件之后，需要更改一下文件权限问题

{% highlight bash %}
{% raw %}

chmod 755 ~/.ssh/config

{% endraw %}
{% endhighlight %}

那，如此简单，这就完成了
你现在只需要 `ssh test1` 就相当于 `ssh -p 3336 test1@192.168.1.100`

----------

# SSH的安全配置 #

ssh配置文件目录:

{% highlight bash %}
{% raw %}

/etc/ssh

{% endraw %}
{% endhighlight %}

1.更改ssh默认的端口:22

将Port注释去掉

{% highlight bash %}
{% raw %}

# vi /etc/ssh/ssh_config
Port 3306(端口号)

{% endraw %}
{% endhighlight %}

将Port注释去掉 

{% highlight bash %}
{% raw %}

# vi /etc/ssh/sshd_config
Port 3306(端口号)

{% endraw %}
{% endhighlight %}

2.限制ssh用户登录次数(防止别人使用密码穷举)

将MaxAuthTries注释去掉

{% highlight bash %}
{% raw %}

# vi /etc/ssh/sshd_config
MaxAuthTries 2(登录次数)

{% endraw %}
{% endhighlight %}

3.限制登录用户

禁止root用户使用ssh登录

{% highlight bash %}
{% raw %}

# vi /etc/ssh/sshd_config
PermitRootLogin no(原本是yes)

{% endraw %}
{% endhighlight %}

只允许指定的用户登录

在最后新增加一行:

{% highlight bash %}
{% raw %}

# vi /etc/ssh/sshd_config
AllowUsers nbadv(指定的用户名)

{% endraw %}
{% endhighlight %}

只允许某个网段的用户登录

增加

{% highlight bash %}
{% raw %}

# vi /etc/hosts.deny
sshd:ALL EXCEPT 192.168.1.0/255.255.255.0(只允许192.168.1.0的网段访问ssh)

{% endraw %}
{% endhighlight %}

4.使用防火墙

{% highlight bash %}
{% raw %}

iptables  -A INPUT -p tcp -m tcp –dport 3306 -j ACCEPT

{% endraw %}
{% endhighlight %}

5.重启ssh服务

{% highlight bash %}
{% raw %}

service sshd restart 或
service sshd stop
service sshd start

{% endraw %}
{% endhighlight %}

6.ssh的超时时间设置

1）.修改server端的etc/ssh/sshd_config

{% highlight bash %}
{% raw %}

ClientAliveInterval 60 ＃server每隔60秒发送一次请求给client，然后client响应，从而保持连接

ClientAliveCountMax 3 ＃server发出请求后，客户端没有响应得次数达到3，就自动断开连接，正常情况下，client不会不响应

{% endraw %}
{% endhighlight %}

2）.修改client端的etc/ssh/ssh_config添加以下：（在没有权限改server配置的情形下）

{% highlight bash %}
{% raw %}

ServerAliveInterval 60 ＃client每隔60秒发送一次请求给server，然后server响应，从而保持连接

ServerAliveCountMax 3  ＃client发出请求后，服务器端没有响应得次数达到3，就自动断开连接，正常情况下，server不会不响应

{% endraw %}
{% endhighlight %}

3）.另一种方式：
 
不修改配置文件

在命令参数里`ssh -o ServerAliveInterval=60` 这样子只会在需要的连接中保持持久连接， 毕竟不是所有连接都要保持持久的

关于ssh的我用到的，就先说到这。如有补充，请留言，谢谢













